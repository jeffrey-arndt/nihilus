image:
  repository: kong/kong-gateway
  #tag: 2.4-alpine
  #tag: 2.5.0.1-alpine
  #tag: 2.8.2.2-alpine
  #tag: 3.0.0.0
  tag: 3.4.2.0-rhel
  #tag: 3.1.1.1-alpine
  #tag: 3.1.1.3
  #tag: 3.4.2.0-rhel
  #tag: 2.8.2.0
  #tag: 2.8.2.3
  #tag: literalgiberish
  pullSecrets:
    - regcred


# plugins:
#   configMaps:                # change this to 'secrets' if you created a secret
#   - name: kong-plugin-myheader
#     pluginName: myheader
      
resources:
  requests:
    ephemeral-storage: "1Gi"
  limits:
    ephemeral-storage: "2Gi"

# customEnv:
#   api_token:
#     valueFrom:
#       secretKeyRef:
#         key: name
#         name: test

env:

  # nginx_proxy_proxy_buffer_size: X
  # nginx_proxy_proxy_buffers: Y
  # nginx_proxy_proxy_busy_buffers_size: Z

  admin_gui_listen: 0.0.0.0:8002, 0.0.0.0:8445 ssl
  admin_gui_url: http://localhost:8002
  admin_listen: 0.0.0.0:8001, 0.0.0.0:8444 ssl
  prefix: /kong_prefix/
  database: "postgres"
  #pg_host: jeffykong-postgresql
  #pg_user: kong
  #pg_password: kong
  #pg_database: kong
  log_level: debug
  audit_log: "off"
  #admin_gui_auth_conf_secret: kong-session-config
  admin_gui_api_url: http://localhost:8001
  # ssl_cert: /etc/secrets/kong-proxy-tls/tls.crt
  # ssl_cert_key:  /etc/secrets/kong-proxy-tls/tls.key
  # admin_ssl_cert: /etc/secrets/kong-admin-tls/tls.crt
  # admin_ssl_cert_key:  /etc/secrets/kong-admin-tls/tls.key
  # admin_gui_ssl_cert:  /etc/secrets/kong-mngr-tls/tls.crt
  # admin_gui_ssl_cert_key:  /etc/secrets/kong-mngr-tls/tls.key
  # portal_api_ssl_cert: /etc/secrets/kong-portalapi-tls/tls.crt
  # portal_api_ssl_cert_key: /etc/secrets/kong-portalapi-tls/tls.key
  # portal_gui_ssl_cert: /etc/secrets/kong-portal-tls/tls.crt
  # portal_gui_ssl_cert_key: /etc/secrets/kong-portal-tls/tls.key
  portal_gui_host: localhost:8003
  portal_api_url: http://localhost:8004
  portal_gui_listen: 0.0.0.0:8003, 0.0.0.0:8446 ssl
  portal_gui_protocol: http
  db_update_frequency: 40
  db_update_propagation: 15
  #worker_consistency: eventual
  plugins: bundled
  proxy_access_log: /dev/stderr
  admin_access_log: /dev/stdout
  admin_gui_access_log: /dev/stdout
  portal_api_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  admin_error_log: /dev/stderr
  admin_gui_error_log: /dev/stderr
  portal_api_error_log: /dev/stderr
  enforce_rbac: "off"
  #nginx_daemon: "on"
  #proxy_set_header: Jeff 'jeff'
  #router_flavor: traditional_compatible
  #nginx_admin_client_body_buffer_size: 35m
  #nginx_admin_client_max_body_size: 35m
  nginx_worker_processes: 2
  tracing_instrumentations: all
  tracing_sampling_rate: .05
  #dns_hostsfile: /etc/hosts
  dns_no_sync: on
  dns_valid_ttl: 1
  

  password:
    valueFrom:
      secretKeyRef:
        name: kong-enterprise-superuser-password
        key: password
  # kong_admin_token:
  #   valueFrom:
  #     secretKeyRef:
  #       name: kong-enterprise-superuser-password
  #       key: password
  # admin_gui_session_conf:
  #     valueFrom:
  #     secretKeyRef:
  #       name: kong-session-config
  #       key: admin_gui_session_conf

  portal_session_conf: '{"cookie_name":"portal_session","cookie_samesite":"off","secret":"Jfa071890!","cookie_secure":false,"storage":"kong"}'

# secretVolumes:
# - kong-proxy-tls
# - kong-admin-tls
# - kong-mngr-tls
# - kong-portal-tls
# - kong-portalapi-tls

# readinessProbe:
#   httpGet:
#     path: "/status"
#     port: status
#     scheme: HTTP
#   initialDelaySeconds: 30
#   timeoutSeconds: 5
#   periodSeconds: 10
#   successThreshold: 1
#   failureThreshold: 3

# # livenessProbe for Kong pods
# livenessProbe:
#   httpGet:
#     path: "/status"
#     port: status
#     scheme: HTTP
#   initialDelaySeconds: 30
#   timeoutSeconds: 5
#   periodSeconds: 10
#   successThreshold: 1
#   failureThreshold: 3

deployment:
  kong:
    # Enable or disable Kong itself
    # Setting this to false with ingressController.enabled=true will create a
    # controller-only release.
    enabled: true
    # Use a DaemonSet controller instead of a Deployment controller
    daemonset: false

  # sidecarContainers:
  # - name: netshoot
  #   image: nicolaka/netshoot
  #   command: ["/bin/bash"]
  #   args: ["-c", "while true; do ping localhost; sleep 60;done"]
  #   env:
  #   - name: SIGSCI_ACCESSKEYID
  #     valueFrom:
  #       secretKeyRef:
  #         name: sigsci.my-site-name-here
  #         key: accesskeyid
  #   - name: SIGSCI_SECRETACCESSKEY
  #     valueFrom:
  #       secretKeyRef:
  #         name: sigsci.my-site-name-here
  #         key: secretaccesskey

nameOverride: kong

proxy:
  enabled: true
  type: LoadBalancer
  annotations:
    konghq.com/protocol: "https"

  http:
    enabled: true
    servicePort: 8000
    containerPort: 8000
    #parameters:
      #- http
  tls:
    enabled: true
    servicePort: 8443
    containerPort: 8443
    parameters:
      - http2


  

# proxy2:
#   enabled: true
#   type: LoadBalancer
#   annotations:
#     konghq.com/protocol: "https"

#   http:
#     enabled: true
#     servicePort: 9000
#     containerPort: 8000
#     #parameters:
#       #- http
#   tls:
#     enabled: true
#     servicePort: 9443
#     containerPort: 8443
#     parameters:
#       - http2

admin:
  enabled: true
  type: LoadBalancer
  annotations:
    konghq.com/protocol: "https"

  http:
    enabled: true
    servicePort: 8001
    containerPort: 8001
    #parameters:
      #- http

  tls:
    enabled: true
    servicePort: 8444
    containerPort: 8444
    parameters:
      - http2

  externalIPs: []
# Enable/disable migration jobs, and set annotations for them
migrations:
  # Enable pre-upgrade migrations (run "kong migrations up")
  preUpgrade: true
  # Enable post-upgrade migrations (run "kong migrations finish")
  postUpgrade: true
  # Annotations to apply to migrations jobs
  # By default, these disable service mesh sidecar injection for Istio and Kuma,
  # as the sidecar containers do not terminate and prevent the jobs from completing
  annotations:
    sidecar.istio.io/inject: false
    kuma.io/sidecar-injection: "enabled"

enterprise:
  enabled: true
  license_secret: kong-enterprise-license
  #kong_tls_secret: my-tls-secret
  vitals:
    enabled: false
  portal:
    enabled: true
  rbac:
    enabled: false
    #admin_gui_auth: basic_auth
    #admin_gui_conf: '{"anonymous":"", "attribute":"uid", "bind_dn":"cn=read-only-admin,dc=example,dc=com", "base_dn":"dc=example,dc=com", "cache_ttl": 2, "consumer_by":["username", "custom_id"], "header_type":"Basic", "keepalive":60000, "ldap_host":"ldap.forumsys.com", "ldap_password":"password", "ldap_port":389, "start_tls":false, "timeout":10000, "verify_ldap_host":false}'
    #admin_gui_auth_conf_secret: kong-session-config
    #session_conf_secret: kong-session-config

manager:
  enabled: true
  type: LoadBalancer
  annotations:
    konghq.com/protocol: "https"

  http:
    enabled: true
    servicePort: 8002
    containerPort: 8002

  tls:
    enabled: true
    servicePort: 8445
    containerPort: 8445
    parameters:
      - http2
      - https

portal:
  enabled: true
  type: LoadBalancer
  annotations:
    konghq.com/protocol: "https"

  http:
    enabled: true
    servicePort: 8003
    containerPort: 8003
    parameters: []

  tls:
    enabled: true
    servicePort: 8446
    containerPort: 8446
    parameters:
      - http2

portalapi:
  enabled: true
  type: LoadBalancer
  annotations:
    konghq.com/protocol: "https"

  http:
    enabled: true
    servicePort: 8004
    containerPort: 8004
    parameters: []

  tls:
    enabled: true
    servicePort: 8447
    containerPort: 8447
    parameters:
      - http2

postgresql:
  enabled: true
  auth:
    username: kong
    password: kong
    database: kong
    postgresPassword: YMqS7wQQdi
  image:
    tag: 13.11.0-debian-11-r20
  service:
    ports:
      postgresql: "5432"

ingressController:
  enabled: false
  installCRDs: false
  image:
    repository: docker.io/kong/kubernetes-ingress-controller
    #repository: docker.io/jeffreyarndtjr/pullsecret
    tag: "2.9"
  env:
    kong_admin_token:
      valueFrom:
        secretKeyRef:
          name: kong-enterprise-superuser-password
          key: password
    kong_admin_url: "http://localhost:8001" # the Kong Admin API URL exposed by a service in the cluster
    publish_service: "kong/jeffykong-kong-proxy" # must be set to the Kong proxy service
    kong_admin_filter_tag: "" # should be set to a different value for each instance of the controller
    log_level: debug
    dump_config: true
    dump_sensitive_config: true
    profiling: true
    #kong_workspace: internal
    #enable_reverse_sync: true
    #kong_workspace: "jeffy-poc-coffee"

  # livenessProbe:
  #   httpGet:
  #     path: /healthz
  #     port: 10254
  #     scheme: HTTP
  #   initialDelaySeconds: 5
  #   timeoutSeconds: 5
  #   periodSeconds: 10
  #   successThreshold: 1
  #   failureThreshold: 3
  # readinessProbe:
  #   httpGet:
  #     path: /readyz
  #     port: 10254
  #     scheme: HTTP
  #   initialDelaySeconds: 5
  #   timeoutSeconds: 5
  #   periodSeconds: 10
  #   successThreshold: 1
  #   failureThreshold: 3
  # resources: {}

  admissionWebhook:
    enabled: true
    port: 8080
    certificate: 
      secretName: kong-validation-webhook

autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 5
  ## targetCPUUtilizationPercentage only used if the cluster doesn't support autoscaling/v2beta
  targetCPUUtilizationPercentage:
  ## Otherwise for clusters that do support autoscaling/v2beta, use metrics
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
